// Code generated by hertz generator.

package blog

import (
	"Blog/biz/model/blog"
	"Blog/dao/daoutils"
	"Blog/dao/mysql"
	"Blog/dao/redis"
	"Blog/entity"
	"Blog/utils"
	"context"
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateBlog .
// @router /createblog/ [OPTIONS]
func CreateBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.CreateBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.CreateBlogResponse)
	userid := c.GetString("userid")
	blog := entity.Blog{}
	id, _ := strconv.Atoi(userid)
	blog.UserID = uint(id)
	blog.Title = req.Title
	blog.Text = req.Text
	blog.Status = int(req.Status)
	b, err := mysql.CreateBlog(blog, req.BlogType)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		err = redis.CreateBlog(b, req.BlogType)
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// Logout .
// @router /login/logout/ [GET]
func Logout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.LogoutRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.LogoutResponse)

	userid := c.GetString("userid")
	id, _ := strconv.Atoi(userid)
	err = redis.Logout(int64(id))
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// Upload .
// @router /login/upload/ [OPTIONS]
func Upload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.UploadRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.UploadResponse) // 0-用户头像
	var url string
	url, err = utils.Upload(c)
	url = "http://qza.nat300.top/" + url
	if err != nil || url == "" {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		m := make(map[string]string)
		m["url"] = url
		resp.Data = m
	}
	c.JSON(consts.StatusOK, resp)
}

// LikeBlog .
// @router /login/likeBlog/ [OPTIONS]
func LikeBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.LikeBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.LikeBlogResponse)

	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	status := req.Status
	id := req.BlogID

	err = redis.LikeBlog(int64(userid), id, status)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
		fmt.Println(err)
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// FavorBlog .
// @router /login/favorBlog/ [OPTIONS]
func FavorBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.LikeBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.LikeBlogResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)

	status := req.Status
	id := req.BlogID

	err = redis.FavorBlog(int64(userid), id, status)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
		fmt.Println(err)
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// GetFavor .
// @router /login/getFavor/ [GET]
func GetFavor(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetFavorRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetFavorResponse)

	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	ids, err := redis.GetUserFavor(int64(userid))
	pagenum := req.PageNum
	maps := []map[string]string{}
	mapp := map[string]string{}
	mapp["count"] = strconv.FormatInt(int64(len(ids)), 10)
	maps = append(maps, mapp)
	if int((pagenum-1)*10) > len(ids) {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		for i := int((pagenum - 1) * 10); i < min(len(ids), int(pagenum)*10); i++ {
			blog := mysql.GetBlogByID(int64(ids[i]))
			t := mysql.GetBlogType(int64(ids[i]))
			like, favor, comment, _ := redis.GetBlogCount(int64(ids[i]))
			user := mysql.GetUserByID(int64(blog.UserID))
			mapp1 := map[string]string{}
			mapp1["title"] = blog.Title
			mapp1["id"] = strconv.FormatInt(int64(blog.ID), 10)
			mapp1["text"] = blog.Text
			mapp1["status"] = strconv.FormatInt(int64(blog.Status), 10)
			mapp1["time"] = blog.UpdatedAt.String()
			mapp1["like_num"] = strconv.FormatInt(int64(like), 10)
			mapp1["commit_num"] = strconv.FormatInt(int64(comment), 10)
			mapp1["author_name"] = user.NickName
			mapp1["favor_num"] = strconv.FormatInt(int64(favor), 10)
			mapp1["author_id"] = strconv.FormatInt(int64(blog.UserID), 10)
			bs := "["
			for j := 0; j < len(t); j++ {
				if j != len(t)-1 {
					bs = bs + t[j] + ","
				} else {
					bs += t[j]
				}
			}
			bs += "]"
			mapp1["type"] = bs
			flag := c.GetString("isLogin")
			flag1, _ := strconv.ParseBool(flag)
			if flag1 == true {
				userid := c.GetString("userid")
				id, _ := strconv.Atoi(userid)
				mapp1["isLike"] = strconv.FormatBool(daoutils.IsLike(int64(id), int64(blog.ID)))
				mapp1["isFavor"] = strconv.FormatBool(daoutils.IsLike(int64(id), int64(blog.ID)))
			}
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
	}
	c.JSON(consts.StatusOK, resp)
}

// FollowUser .
// @router /login/followUser/ [OPTIONS]
func FollowUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.FollowUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.FollowUserResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	err = mysql.FollowUser(int64(userid), req.Userid, req.Status)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// GetFollow .
// @router /login/getFollow/ [GET]
func GetFollow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetFollowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetFollowResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)

	users, count, err := mysql.GetFollowUser(int64(userid), req.PageNum)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		maps := []map[string]string{}
		mapp := map[string]string{}
		mapp["count"] = strconv.FormatInt(count, 10)
		maps = append(maps, mapp)
		for i := 0; i < len(users); i++ {
			mapp1 := map[string]string{}
			mapp1["nickname"] = users[i].NickName
			mapp1["id"] = strconv.FormatInt(int64(users[i].ID), 10)
			mapp1["avatar"] = users[i].Avatar
			mapp1["email"] = users[i].Email
			follow, follower, work, favor := mysql.GetUserCountByID(int64(users[i].ID))
			mapp1["follow"] = strconv.FormatInt(follow, 10)
			mapp1["follower"] = strconv.FormatInt(follower, 10)
			mapp1["work"] = strconv.FormatInt(work, 10)
			mapp1["favor"] = strconv.FormatInt(favor, 10)
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
	}
	c.JSON(consts.StatusOK, resp)
}

// CommentBlog .
// @router /login/commentBlog/ [OPTIONS]
func CommentBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.CommentBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.CommentBlogResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	comment := entity.Comment{}
	comment.UserID = uint(userid)
	comment.BlogID = uint(req.BlogID)
	comment.Text = req.Text
	err = mysql.CommentBlog(comment)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /login/getUser/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetUserInfoResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	u := mysql.GetUserByID(int64(userid))
	follow, follower, work, favor := mysql.GetUserCountByID(int64(userid))
	m := map[string]string{}
	m["user_id"] = strconv.FormatInt(int64(u.ID), 10)
	m["nickname"] = u.NickName
	m["avatar"] = u.Avatar
	m["status"] = strconv.FormatInt(u.Status, 10)
	m["username"] = u.Username
	m["email"] = u.Email
	m["create_time"] = u.CreatedAt.String()
	m["follow"] = strconv.FormatInt(follow, 10)
	m["follower"] = strconv.FormatInt(follower, 10)
	m["work"] = strconv.FormatInt(work, 10)
	m["favor"] = strconv.FormatInt(favor, 10)
	m["sex"] = u.Sex
	m["sign"] = u.Sign
	m["birth"] = u.Birth
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = m
	c.JSON(consts.StatusOK, resp)
}

// GetDraft .
// @router /login/getDraft/ [GET]
func GetDraft(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetDraftRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetDraftResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	blogs, count, err := mysql.GetDraft(int64(userid), req.PageNum)
	maps := []map[string]string{}
	mapp := map[string]string{}
	mapp["count"] = strconv.FormatInt(int64(count), 10)
	maps = append(maps, mapp)
	for i := 0; i < len(blogs); i++ {
		t := mysql.GetBlogType(int64(blogs[i].ID))
		mapp1 := map[string]string{}
		mapp1["title"] = blogs[i].Title
		mapp1["id"] = strconv.FormatInt(int64(blogs[i].ID), 10)
		mapp1["text"] = blogs[i].Text
		mapp1["status"] = strconv.FormatInt(int64(blogs[i].Status), 10)
		mapp1["time"] = blogs[i].UpdatedAt.String()
		bs := ""
		for j := 0; j < len(t); j++ {
			if j != len(t)-1 {
				bs = bs + t[j] + ","
			} else {
				bs += t[j]
			}
		}
		mapp1["type"] = bs
		maps = append(maps, mapp1)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = maps
	c.JSON(consts.StatusOK, resp)
}

// ChangeUserInfo .
// @router /login/changeUserInfo/ [PUT]
func ChangeUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.ChangeUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.ChangeUserInfoResponse)
	pass := req.Password
	user := entity.User{}
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	user.ID = uint(userid)
	user.Sex = req.Sex
	user.Sign = req.Sign
	user.Birth = req.Birth
	if pass != nil {
		if utils.PasswordCheck(*pass) == false {
			resp.StatusCode = 1003
			resp.StatusMsg = "密码格式错误"
			c.JSON(consts.StatusOK, resp)
			return
		}
		str := *pass
		data := []byte(str)
		md5New := md5.New()
		md5New.Write(data)
		// hex转字符串
		md5String := hex.EncodeToString(md5New.Sum(nil))
		user.Password = md5String
	} else {
		user.Password = ""
	}
	user.NickName = req.NickName
	user.Avatar = req.Avatar
	err = mysql.ChangeUserInfo(user)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		redis.DelUserInfo(int64(userid))
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// ChengeDraft .
// @router /login/changeDraft/ [PUT]
func ChengeDraft(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.ChangeDraftRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.ChangeDraftResponse)
	blog := entity.Blog{}
	blog.ID = uint(req.BlogID)
	blog.Title = req.Title
	blog.Text = req.Text
	blog.Status = int(req.Status)
	err = mysql.ChangeBlogInfo(blog)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
		c.JSON(consts.StatusOK, resp)
		return
	}
	t := req.BlogType
	mysql.DelType(req.BlogID)
	mysql.AddType(req.BlogID, t)
	redis.DelBlog(req.BlogID)
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// ReComment .
// @router /login/reComment/ [POST]
func ReComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.ReCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.ReCommentResponse)

	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	comment := entity.ReComment{}
	comment.UserID = uint(userid)
	comment.CommentID = uint(req.CommentID)
	comment.Text = req.Text
	err = mysql.ReComment(comment)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}

	c.JSON(consts.StatusOK, resp)
}

// LikeComment .
// @router /login/LikeComment/ [POST]
func LikeComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.LikeCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.LikeCommentResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	if req.Status == 0 {
		err = mysql.LikeComment(req.CommentID, int64(userid))
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "fail"
		} else {
			resp.StatusCode = 0
			resp.StatusMsg = "success"
		}
	} else {
		err = mysql.DelLikeComment(req.CommentID, int64(userid))
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "fail"
		} else {
			resp.StatusCode = 0
			resp.StatusMsg = "success"
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// DelBlog .
// @router /login/delBlog/ [POST]
func DelBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.DelBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.DelBlogResponse)
	strid := c.GetString("userid")
	userid, _ := strconv.Atoi(strid)
	userid1, err := daoutils.GetBlogUser(req.BlogID)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		if userid != int(userid1) {
			resp.StatusCode = -1
			resp.StatusMsg = "fail"
		} else {
			mysql.DelBlog(req.BlogID)
			resp.StatusCode = 0
			resp.StatusMsg = "success"
		}
	}
	c.JSON(consts.StatusOK, resp)
}
