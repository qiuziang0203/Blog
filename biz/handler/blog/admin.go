// Code generated by hertz generator.

package blog

import (
	"Blog/dao/mysql"
	"Blog/entity"
	"context"
	"strconv"

	blog "Blog/biz/model/blog"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetPending .
// @router /login/admin/getpending/ [GET]
func GetPending(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetPendingRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetPendingResponse)

	blogs, count, err := mysql.GetPending(req.PageNum)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		maps := []map[string]string{}
		mapp := map[string]string{}
		mapp["count"] = strconv.FormatInt(int64(count), 10)
		maps = append(maps, mapp)
		for i := 0; i < len(blogs); i++ {
			user := mysql.GetUserByID(int64(blogs[i].UserID))
			mapp1 := map[string]string{}
			mapp1["title"] = blogs[i].Title
			mapp1["id"] = strconv.FormatInt(int64(blogs[i].ID), 10)
			mapp1["text"] = blogs[i].Text
			mapp1["status"] = strconv.FormatInt(int64(blogs[i].Status), 10)
			mapp1["time"] = blogs[i].UpdatedAt.String()
			mapp1["like_num"] = strconv.FormatInt(int64(blogs[i].LikeNum), 10)
			mapp1["commit_num"] = strconv.FormatInt(int64(blogs[i].CommentNum), 10)
			mapp1["author_name"] = user.NickName
			mapp1["favor_num"] = strconv.FormatInt(int64(blogs[i].FavorNum), 10)
			mapp1["author_id"] = strconv.FormatInt(int64(blogs[i].UserID), 10)
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
	}
	c.JSON(consts.StatusOK, resp)
}

// ApprovalBlog .
// @router /login/admin/approbalBlog/ [OPTIONS]
func ApprovalBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.ApprovalBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.ApprovalBlogResponse)

	err = mysql.ApprovalBlog(req.BlogID)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
	}
	c.JSON(consts.StatusOK, resp)
}

// ForbiddenUser .
// @router /login/admin/forbiddenUser/ [OPTIONS]
func ForbiddenUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.ForbiddenUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.ForbiddenUserResponse)
	id := int(req.ID)
	userstatus, err := mysql.GetUserStatus(id)
	if err != nil {
		resp.StatusCode = 1103
		resp.StatusMsg = "用户不存在"
	} else {
		status := req.Status
		if req.Status < 0 || req.Status > 1 {
			resp.StatusCode = -1
			resp.StatusMsg = "fail"
		} else {
			if userstatus != 0 && status == 0 {
				resp.StatusCode = 1101
				resp.StatusMsg = "该用户无法封禁"
			} else if userstatus != 2 && status == 1 {
				resp.StatusCode = 1102
				resp.StatusMsg = "该用户无需解封"
			} else {
				if status == 0 {
					err = mysql.ForbiddenUser(int64(id), 2)
				} else {
					err = mysql.ForbiddenUser(int64(id), 0)
				}
				if err != nil {
					resp.StatusCode = -1
					resp.StatusMsg = "fail"
				} else {
					resp.StatusCode = 0
					resp.StatusMsg = "success"
				}
			}
		}
	}
	c.JSON(consts.StatusOK, resp)
}

// GetForbidden .
// @router /login/admin/getForbidden/ [GET]
func GetForbidden(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetForbiddenRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetForbiddenResponse)

	users, count, err := mysql.GetForbidden(req.PageNum)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		maps := []map[string]string{}
		mapp := map[string]string{}
		mapp["count"] = strconv.FormatInt(int64(count), 10)
		maps = append(maps, mapp)
		for i := 0; i < len(users); i++ {
			mapp1 := map[string]string{}
			mapp1["id"] = strconv.FormatInt(int64(users[i].ID), 10)
			mapp1["username"] = users[i].Username
			mapp1["nickname"] = users[i].NickName
			mapp1["avatar"] = users[i].Avatar
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
	}

	c.JSON(consts.StatusOK, resp)
}

// AddAnnouncement .
// @router /login/admin/addAnnouncement/ [OPTIONS]
func AddAnnouncement(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.AddAnnouncementRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.AddAnnouncementResponse)
	announcement := entity.Announcement{}
	announcement.Title = req.Title
	announcement.Text = req.Text
	mysql.AddAnnouncement(announcement)
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// DelAnnouncement .
// @router /login/admin/delAnnouncement/ [OPTIONS]
func DelAnnouncement(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.DelAnnouncementRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.DelAnnouncementResponse)
	mysql.DelAnnouncement(req.ID)
	resp.StatusCode = 0
	resp.StatusMsg = "success"

	c.JSON(consts.StatusOK, resp)
}
