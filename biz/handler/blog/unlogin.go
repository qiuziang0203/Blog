// Code generated by hertz generator.

package blog

import (
	"Blog/biz/model/blog"
	"Blog/dao/daoutils"
	"Blog/dao/mysql"
	"Blog/dao/redis"
	"Blog/entity"
	"Blog/utils"
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /blog/user/register/ [OPTIONS]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.RegisterResponse)
	user := entity.User{
		Username: req.Username,
		Password: req.Password,
		NickName: req.Nickname,
		Email:    req.Email,
		Sex:      req.Sex,
		Birth:    req.Birth,
		Sign:     req.Sign,
	}
	if utils.UsernameCheck(user.Username) == false {
		resp.StatusCode = 1001
		resp.StatusMsg = "用户名格式错误"
	} else if utils.EmailCheck(user.Email) == false {
		resp.StatusCode = 1002
		resp.StatusMsg = "邮箱格式错误"
	} else if utils.PasswordCheck(user.Password) == false {
		resp.StatusCode = 1003
		resp.StatusMsg = "密码格式错误"
	} else {
		u, err := mysql.Register(user)
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "fail"
		} else {
			redis.Register(u)
			resp.StatusCode = 0
			resp.StatusMsg = "success"
			m := map[string]string{}
			m["user_id"] = strconv.FormatInt(int64(u.ID), 10)
			m["nickname"] = u.NickName
			m["avatar"] = u.Avatar
			m["status"] = strconv.FormatInt(int64(u.Status), 10)
			token, _ := utils.GenToken(int64(u.ID))
			redis.SetToken(int64(u.ID), token)
			m["token"] = token
			resp.Data = m
		}
	}
	c.JSON(consts.StatusOK, resp)
}

// PasswordLogin .
// @router /blog/user/passwordLogin/ [OPTIONS]
func PasswordLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.PasswordLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.PasswordLoginResponse)
	u, err := mysql.PasswordLogin(req.Username, req.Password)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		token, _ := utils.GenToken(int64(u.ID))
		redis.SetToken(int64(u.ID), token)
		redis.Register(u)
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		m := map[string]string{}
		m["user_id"] = strconv.FormatInt(int64(u.ID), 10)
		m["nickname"] = u.NickName
		m["avatar"] = u.Avatar
		m["status"] = strconv.FormatInt(u.Status, 10)
		m["token"] = token

		resp.Data = m
	}
	c.JSON(consts.StatusOK, resp)
}

// GetBlogByType .
// @router /unlogin/getBlogByType/ [GET]
func GetBlogByType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetBlogByTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetBlogByTypeResponse)

	typename := req.TypeName
	pagenum := req.PageNum
	status := req.Status
	var way string
	if status == 1 {
		way = "hot desc"
	} else {
		way = "id desc"
	}

	blogs, count, err := mysql.GetBlogByType(typename, way, int(pagenum))
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		maps := []map[string]string{}
		mapp := map[string]string{}
		mapp["count"] = strconv.FormatInt(count, 10)
		maps = append(maps, mapp)
		for i := 0; i < len(blogs); i++ {
			t := mysql.GetBlogType(int64(blogs[i].ID))
			like, favor, comment, _ := redis.GetBlogCount(int64(blogs[i].ID))
			user := mysql.GetUserByID(int64(blogs[i].UserID))
			mapp1 := map[string]string{}
			mapp1["title"] = blogs[i].Title
			mapp1["id"] = strconv.FormatInt(int64(blogs[i].ID), 10)
			mapp1["text"] = blogs[i].Text
			mapp1["status"] = strconv.FormatInt(int64(blogs[i].Status), 10)
			mapp1["time"] = blogs[i].UpdatedAt.String()
			mapp1["like_num"] = strconv.FormatInt(int64(like), 10)
			mapp1["comment_num"] = strconv.FormatInt(int64(comment), 10)
			mapp1["author_name"] = user.NickName
			mapp1["favor_num"] = strconv.FormatInt(int64(favor), 10)
			mapp1["author_id"] = strconv.FormatInt(int64(blogs[i].UserID), 10)
			mapp1["hot"] = strconv.FormatInt(int64(blogs[i].Hot), 10)
			mapp1["author_avatar"] = user.Avatar
			bs := "["
			for j := 0; j < len(t); j++ {
				if j != len(t)-1 {
					bs = bs + t[j] + ","
				} else {
					bs += t[j]
				}
			}
			bs += "]"
			mapp1["type"] = bs
			flag := c.GetString("isLogin")
			flag1, _ := strconv.ParseBool(flag)
			if flag1 == true {
				userid := c.GetString("userid")
				id, _ := strconv.Atoi(userid)
				mapp1["isLike"] = strconv.FormatBool(daoutils.IsLike(int64(id), int64(blogs[i].ID)))
				mapp1["isFavor"] = strconv.FormatBool(daoutils.IsFavor(int64(id), int64(blogs[i].ID)))
			}
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
	}

	c.JSON(consts.StatusOK, resp)
}

// GetBlogByKeyword .
// @router /unlogin/getBlogByKeyword/ [GET]
func GetBlogByKeyword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetBlogByKeywordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetBlogByKeywordResponse)

	status := req.Status
	var way string
	if status == 1 {
		way = "hot desc"
	} else {
		way = "id desc"
	}
	blogs, count, err := mysql.GetBlogByKeyword(req.Keyword, way, req.PageNum)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		maps := []map[string]string{}
		mapp := map[string]string{}
		mapp["count"] = strconv.FormatInt(int64(count), 10)
		maps = append(maps, mapp)
		for i := 0; i < len(blogs); i++ {
			t := mysql.GetBlogType(int64(blogs[i].ID))
			like, favor, comment, _ := redis.GetBlogCount(int64(blogs[i].ID))
			user := mysql.GetUserByID(int64(blogs[i].UserID))
			mapp1 := map[string]string{}
			mapp1["title"] = blogs[i].Title
			mapp1["id"] = strconv.FormatInt(int64(blogs[i].ID), 10)
			mapp1["text"] = blogs[i].Text
			mapp1["status"] = strconv.FormatInt(int64(blogs[i].Status), 10)
			mapp1["time"] = blogs[i].UpdatedAt.String()
			mapp1["like_num"] = strconv.FormatInt(int64(like), 10)
			mapp1["comment_num"] = strconv.FormatInt(int64(comment), 10)
			mapp1["author_name"] = user.NickName
			mapp1["favor_num"] = strconv.FormatInt(int64(favor), 10)
			mapp1["author_id"] = strconv.FormatInt(int64(blogs[i].UserID), 10)
			mapp1["hot"] = strconv.FormatInt(int64(blogs[i].Hot), 10)
			mapp1["author_avatar"] = user.Avatar
			bs := "["
			for j := 0; j < len(t); j++ {
				if j != len(t)-1 {
					bs = bs + t[j] + ","
				} else {
					bs += t[j]
				}
			}
			bs += "]"
			mapp1["type"] = bs
			flag := c.GetString("isLogin")
			flag1, _ := strconv.ParseBool(flag)
			if flag1 == true {
				userid := c.GetString("userid")
				id, _ := strconv.Atoi(userid)
				mapp1["isLike"] = strconv.FormatBool(daoutils.IsLike(int64(id), int64(blogs[i].ID)))
				mapp1["isFavor"] = strconv.FormatBool(daoutils.IsFavor(int64(id), int64(blogs[i].ID)))
			}
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
	}
	c.JSON(consts.StatusOK, resp)
}

// GetUserByKeyword .
// @router /unlogin/getUserByKeyword/ [GET]
func GetUserByKeyword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetUserByKeywordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetUserByKeywordResponse)

	users, count, err := mysql.GetUserByKeyword(req.Keyword, req.PageNum)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		maps := []map[string]string{}
		mapp := map[string]string{}
		mapp["count"] = strconv.FormatInt(count, 10)
		maps = append(maps, mapp)
		for i := 0; i < len(users); i++ {
			mapp1 := map[string]string{}
			mapp1["nickname"] = users[i].NickName
			mapp1["id"] = strconv.FormatInt(int64(users[i].ID), 10)
			mapp1["avatar"] = users[i].Avatar
			mapp1["email"] = users[i].Email
			follow, follower, work, favor := mysql.GetUserCountByID(int64(users[i].ID))
			mapp1["follow"] = strconv.FormatInt(follow, 10)
			mapp1["follower"] = strconv.FormatInt(follower, 10)
			mapp1["work"] = strconv.FormatInt(work, 10)
			mapp1["favor"] = strconv.FormatInt(favor, 10)
			maps = append(maps, mapp1)
		}
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = maps
		c.JSON(consts.StatusOK, resp)
	}
}

// GetBlogComment .
// @router /unlogin/getBlogComment/ [GET]
func GetBlogComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetBlogCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetBlogCommentResponse)

	comments := mysql.GetBlogComment(req.BlogID)
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	maps := []map[string]string{}
	for i := 0; i < len(comments); i++ {
		mapp1 := map[string]string{}
		user := mysql.GetUserByID(int64(comments[i].UserID))
		mapp1["comment_id"] = strconv.FormatInt(int64(comments[i].ID), 10)
		mapp1["user_id"] = strconv.FormatInt(int64(user.ID), 10)
		mapp1["avatar"] = user.Avatar
		mapp1["nickname"] = user.NickName
		mapp1["like"] = strconv.FormatInt(int64(comments[i].LikeNum), 10)
		mapp1["recomment"] = strconv.FormatInt(int64(comments[i].ReCommentNum), 10)
		mapp1["comment_time"] = comments[i].UpdatedAt.String()
		maps = append(maps, mapp1)
	}
	resp.Data = maps
	c.JSON(consts.StatusOK, resp)
}

// GetUserBlog .
// @router /unlogin/getUserBlog/ [GET]
func GetUserBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetUserBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetUserBlogResponse)

	blogs, count, err := mysql.GetUserBlog(int64(req.UserID), req.PageNum)
	maps := []map[string]string{}
	mapp := map[string]string{}
	mapp["count"] = strconv.FormatInt(int64(count), 10)
	maps = append(maps, mapp)
	for i := 0; i < len(blogs); i++ {
		t := mysql.GetBlogType(int64(blogs[i].ID))
		like, favor, comment, _ := redis.GetBlogCount(int64(blogs[i].ID))
		mapp1 := map[string]string{}
		mapp1["title"] = blogs[i].Title
		mapp1["id"] = strconv.FormatInt(int64(blogs[i].ID), 10)
		mapp1["text"] = blogs[i].Text
		mapp1["status"] = strconv.FormatInt(int64(blogs[i].Status), 10)
		mapp1["time"] = blogs[i].UpdatedAt.String()
		mapp1["like"] = strconv.FormatInt(int64(like), 10)
		mapp1["favor"] = strconv.FormatInt(int64(favor), 10)
		mapp1["comment"] = strconv.FormatInt(int64(comment), 10)
		bs := ""
		for j := 0; j < len(t); j++ {
			if j != len(t)-1 {
				bs = bs + t[j] + ","
			} else {
				bs += t[j]
			}
		}
		mapp1["type"] = bs
		maps = append(maps, mapp1)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = maps
	c.JSON(consts.StatusOK, resp)
}

// GetReComment .
// @router /unlogin/getReComment/ [GET]
func GetReComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetReCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetReCommentResponse)

	comments := mysql.GetReComment(req.CommentID)
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	maps := []map[string]string{}
	for i := 0; i < len(comments); i++ {
		mapp1 := map[string]string{}
		user := mysql.GetUserByID(int64(comments[i].UserID))
		mapp1["recomment_id"] = strconv.FormatInt(int64(comments[i].ID), 10)
		mapp1["user_id"] = strconv.FormatInt(int64(user.ID), 10)
		mapp1["avatar"] = user.Avatar
		mapp1["nickname"] = user.NickName
		mapp1["like"] = strconv.FormatInt(int64(comments[i].LikeNum), 10)
		mapp1["recomment_time"] = comments[i].UpdatedAt.String()
		mapp1["text"] = comments[i].Text
		maps = append(maps, mapp1)
	}
	resp.Data = maps
	c.JSON(consts.StatusOK, resp)
}

// GetHotBlog .
// @router /unlogin/getHotBlog/ [GET]
func GetHotBlog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetHotBlogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetHotBlogResponse)
	blogs, count, err := mysql.GetHotBlog()
	maps := []map[string]string{}
	mapp := map[string]string{}
	mapp["count"] = strconv.FormatInt(int64(count), 10)
	maps = append(maps, mapp)
	for i := 0; i < len(blogs); i++ {
		t := mysql.GetBlogType(int64(blogs[i].ID))
		like, favor, comment, _ := mysql.GetBlogCount(int64(blogs[i].ID))
		user := mysql.GetUserByID(int64(blogs[i].UserID))
		mapp1 := map[string]string{}
		mapp1["title"] = blogs[i].Title
		mapp1["id"] = strconv.FormatInt(int64(blogs[i].ID), 10)
		mapp1["text"] = blogs[i].Text
		mapp1["status"] = strconv.FormatInt(int64(blogs[i].Status), 10)
		mapp1["time"] = blogs[i].UpdatedAt.String()
		mapp1["like_num"] = strconv.FormatInt(int64(like), 10)
		mapp1["comment_num"] = strconv.FormatInt(int64(comment), 10)
		mapp1["author_name"] = user.NickName
		mapp1["favor_num"] = strconv.FormatInt(int64(favor), 10)
		mapp1["author_id"] = strconv.FormatInt(int64(blogs[i].UserID), 10)
		mapp1["hot"] = strconv.FormatInt(int64(blogs[i].Hot), 10)
		mapp1["author_avatar"] = user.Avatar
		bs := ""
		for j := 0; j < len(t); j++ {
			if j != len(t)-1 {
				bs = bs + t[j] + ","
			} else {
				bs += t[j]
			}
		}
		mapp1["type"] = bs
		flag := c.GetString("isLogin")
		flag1, _ := strconv.ParseBool(flag)
		if flag1 == true {
			userid := c.GetString("userid")
			id, _ := strconv.Atoi(userid)
			mapp1["isLike"] = strconv.FormatBool(daoutils.IsLike(int64(id), int64(blogs[i].ID)))
			mapp1["isFavor"] = strconv.FormatBool(daoutils.IsFavor(int64(id), int64(blogs[i].ID)))
		}
		maps = append(maps, mapp1)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = maps

	c.JSON(consts.StatusOK, resp)
}

// GetAllType .
// @router /unlogin/getAllType/ [GET]
func GetAllType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetAllTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(blog.GetAllTypeResponse)

	t := mysql.GetAllType()
	maps := []map[string]string{}
	for i := 0; i < len(t); i++ {
		mapp1 := map[string]string{}
		mapp1["type_name"] = t[i].TypeName
		mapp1["type_brief"] = t[i].TypeBrief
		maps = append(maps, mapp1)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = maps
	c.JSON(consts.StatusOK, resp)
}

// GetAnnouncement .
// @router /unlogin/getAnnouncement/ [GET]
func GetAnnouncement(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetAnnouncementRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetAnnouncementResponse)

	anns := mysql.GetAnnouncement()
	maps := []map[string]string{}
	for i := 0; i < len(anns); i++ {
		mapp1 := map[string]string{}
		mapp1["id"] = strconv.FormatInt(int64(anns[i].ID), 10)
		mapp1["title"] = anns[i].Title
		mapp1["text"] = anns[i].Text
		mapp1["time"] = anns[i].CreatedAt.String()
		maps = append(maps, mapp1)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = maps
	c.JSON(consts.StatusOK, resp)
}

// GetBlogByID .
// @router /unlogin/getBlogByID/ [GET]
func GetBlogByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetBlogByIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetBlogByIDResponse)

	blog := mysql.GetBlogByID(req.BlogID)
	t := mysql.GetBlogType(int64(blog.ID))
	like, favor, comment, _ := mysql.GetBlogCount(req.BlogID)
	user := mysql.GetUserByID(int64(blog.UserID))
	mapp1 := map[string]string{}
	mapp1["title"] = blog.Title
	mapp1["id"] = strconv.FormatInt(int64(blog.ID), 10)
	mapp1["text"] = blog.Text
	mapp1["status"] = strconv.FormatInt(int64(blog.Status), 10)
	mapp1["time"] = blog.UpdatedAt.String()
	mapp1["like_num"] = strconv.FormatInt(int64(like), 10)
	mapp1["comment_num"] = strconv.FormatInt(int64(comment), 10)
	mapp1["author_name"] = user.NickName
	mapp1["favor_num"] = strconv.FormatInt(int64(favor), 10)
	mapp1["author_id"] = strconv.FormatInt(int64(blog.UserID), 10)
	mapp1["hot"] = strconv.FormatInt(int64(blog.Hot), 10)
	mapp1["author_avatar"] = user.Avatar
	bs := ""
	for j := 0; j < len(t); j++ {
		if j != len(t)-1 {
			bs = bs + t[j] + ","
		} else {
			bs += t[j]
		}
	}
	mapp1["type"] = bs
	flag := c.GetString("isLogin")
	flag1, _ := strconv.ParseBool(flag)
	if flag1 == true {
		userid := c.GetString("userid")
		id, _ := strconv.Atoi(userid)
		mapp1["isLike"] = strconv.FormatBool(daoutils.IsLike(int64(id), int64(blog.ID)))
		mapp1["isFavor"] = strconv.FormatBool(daoutils.IsFavor(int64(id), int64(blog.ID)))
	}
	if blog.ID == 0 {
		resp.StatusCode = -1
		resp.StatusMsg = "fail"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		resp.Data = mapp1
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfoByID .
// @router /unlogin/getUserByID/ [GET]
func GetUserInfoByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req blog.GetUserInfoByIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(blog.GetUserInfoByIDResponse)
	user := mysql.GetUserByID(req.UserID)
	mapp1 := map[string]string{}
	mapp1["nickname"] = user.NickName
	mapp1["id"] = strconv.FormatInt(int64(user.ID), 10)
	mapp1["avatar"] = user.Avatar
	mapp1["email"] = user.Email
	follow, follower, work, favor := mysql.GetUserCountByID(int64(user.ID))
	mapp1["follow"] = strconv.FormatInt(follow, 10)
	mapp1["follower"] = strconv.FormatInt(follower, 10)
	mapp1["work"] = strconv.FormatInt(work, 10)
	mapp1["favor"] = strconv.FormatInt(favor, 10)
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	resp.Data = mapp1
	c.JSON(consts.StatusOK, resp)
}
